### このファイルはnginx本設定ファイルの/etc/nginx/nginx.confに読み込まれて使われる

# Nginxが受け取ったリクエストをバックエンドのpumaに送信
# upstreamでサーバグループを定義。upstreamとはネットワークで下流から上流の通信機器へデータが流れること
# 今回はpumaというサーバーグループを作成。
upstream puma {
  # server で、ドメインかIPアドレスとポート、または、unix:プレフィックスの後に指定されたUNIXドメインソケットパスを指定できる
  # 今回はUnixドメインソケットパスを指定。ソケット通信したいのでpuma.sockを指定
  server unix:///app/tmp/sockets/puma.sock;
}

server {
  listen 80;
  # ドメインもしくはIPを指定で、バーチャルサーバの名前を設定
  # ローカルホストにサーバを立てるのでlocalhostを使う
  server_name localhost;

  # アクセスログ、エラーログの出力先の設定します。
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;

  # ルートディレクトリを設定する。
  root /app/public;

  # リクエストボディサイズを制限する(デフォルト値は1m)
  client_max_body_size 100m;

  # エラーコードとエラーページのマッピングを設定
  # nginxコンテナの/app/public内に格納されている。rootで/app/publicを指定しているから、それ以降の指定で設定できる
  error_page 404             /404.html;
  error_page 505 502 503 504 /500.html;

  # 左から順に指定したファイルやディレクトリの存在を順番に調べ、存在すれば、そのファイルやディレクトリに対応したファイルを返します。一つも存在しなかったら、最後に記述したパスに内部リダイレクトします
  # nginx.confでは$で変数を表す。$uriはパラメータなしのリクエストURI
  try_files  $uri/index.html $uri @app;

  # HTTPはリクエスト毎にサーバ／クライアント間で接続を確立し、レスポンスを返します。レスポンスを返したら接続を切るため、リクエストが大量にあれば、たとえ同じクライアントだとしてもそれだけ接続／切断を繰り返すことになります。
  # これでは無駄なので、レスポンス送信後すぐに切断せずにしばらく待つことで、次リクエストの接続処理スキップすることで効率よくなります。
  # その接続したままにする時間
  keepalive_timeout 60s;

  # リバースプロキシ関連の設定
  # 内部的なURIのパスの書き換えを行わずに内部リダイレクトを行う際に利用されます。
  # location @appは、名前付きロケーションと言う。内部リダイレクト処理を行う際に、アットマークから始まる名前を指定すると、その名前がついたブロック内の処理を行います。
  # 要はここで@appを作成することで、他のところで@appを使うとこれが呼ばれる。
  location @app {
    # proxy_hide_headerでプロキシサーバからパス先サーバにheader情報を追加で渡す
    # $remote_addrはクライアントアドレス。$http_hostは、要求ヘッダのHostの値
    proxy_set_header X-Real-IP       $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host            $http_host;
    # proxy_passディレクティブ。プロキシするサーバのプロトコルとアドレスを指定する
    # 今回は、UNIXドメインソケットなので、upstreamで設定した名前を使う
    proxy_pass http://puma;
  }
}
