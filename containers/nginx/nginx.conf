# プロキシ先の指定
# Nginxが受け取ったリクエストをバックエンドのpumaに送信
# upstreamでサーバグループを定義する。upstreamとはネットワークで下流から上流の通信機器へデータが流れることを指している
upstream puma {
  # serverでアドレスはドメインかIPアドレスとポート、またはunix:プレフィックスの後に指定されたUNIXドメインソケットパスを指定できます。
  # ポート未指定はポート80が使用されます。
  # ソケット通信したいのでpuma.sockを指定
  server unix:///app/tmp/sockets/puma.sock;
}

server {
  listen 80;
  # バーチャルサーバの名前を設定します。
  # ドメインもしくはIPを指定
  # ローカルホストにサーバを立てるのでlocalhostを使う
  server_name localhost;

  # nginxコンテナ
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;

  # ドキュメントルートの指定
  # ルートディレクトリを設定する。
  root /app/public;

  client_max_body_size 100m;
  error_page 404             /404.html;
  error_page 505 502 503 504 /500.html;
  # Nginxの設定にて、静的なファイルと動的なURLを振り分けたいことがあります。try_filesを利用すれば、指定した順番で確認と転送を実施してくれます。
  # 指定したファイルやディレクトリの存在を順番に調べ、存在すれば、そのファイルやディレクトリに対応したファイルを返します。一つも存在しなかったら、最後に記述したパスに内部リダイレクトします
  try_files  $uri/index.html $uri @app;
  keepalive_timeout 5;

  # リバースプロキシ関連の設定
  # この名前付きロケーションは後述する内部リダイレクトで使用します。内部的なURIのパスの書き換えを行わずに内部リダイレクトを行う際に利用されます。
  location @app {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    # proxy_passディレクティブ。プロキシするサーバのプロトコルとアドレスを指定する
    # UNIXドメインソケットなので、 upstreamで設定した名前を使います。
    proxy_pass http://puma;
  }
}
